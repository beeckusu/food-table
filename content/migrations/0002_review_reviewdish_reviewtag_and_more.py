# Generated by Django 5.2.7 on 2025-10-10 01:22

import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('content', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('restaurant_name', models.CharField(max_length=255)),
                ('visit_date', models.DateField()),
                ('entry_time', models.TimeField(help_text='Time of entry to the restaurant')),
                ('party_size', models.PositiveIntegerField(help_text='Number of people in the party', validators=[django.core.validators.MinValueValidator(1)])),
                ('location', models.CharField(blank=True, max_length=255)),
                ('address', models.TextField(blank=True)),
                ('rating', models.IntegerField(help_text='Overall restaurant rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_private', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-visit_date', '-entry_time'],
            },
        ),
        migrations.CreateModel(
            name='ReviewDish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dish_rating', models.IntegerField(blank=True, help_text='Optional rating for this specific dish (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Optional cost/price for this dish', max_digits=8, null=True)),
                ('encyclopedia_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dish_reviews', to='content.encyclopedia')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_dishes', to='content.review')),
            ],
            options={
                'verbose_name': 'Review Dish',
                'verbose_name_plural': 'Review Dishes',
                'ordering': ['review', 'encyclopedia_entry'],
            },
        ),
        migrations.CreateModel(
            name='ReviewTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_tags', to='content.review')),
            ],
            options={
                'verbose_name': 'Review Tag',
                'verbose_name_plural': 'Review Tags',
                'ordering': ['tag'],
            },
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['-visit_date'], name='content_rev_visit_d_3c2a87_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['restaurant_name'], name='content_rev_restaur_4e0d3a_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_by'], name='content_rev_created_590b66_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewdish',
            unique_together={('review', 'encyclopedia_entry')},
        ),
        migrations.AlterUniqueTogether(
            name='reviewtag',
            unique_together={('review', 'tag')},
        ),
    ]
